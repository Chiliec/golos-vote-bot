package main

import (
	"database/sql"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"net/url"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	golosClient "github.com/asuleymanov/golos-go/client"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/grokify/html-strip-tags-go"

	configuration "github.com/GolosTools/golos-vote-bot/config"
	"github.com/GolosTools/golos-vote-bot/db"
	"github.com/GolosTools/golos-vote-bot/helpers"
	"github.com/GolosTools/golos-vote-bot/models"
)

const (
	buttonAddKey        = "üê¨–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å"
	buttonRemoveKey     = "ü¶Ä–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
	buttonSetPowerLimit = "üí™–ù–∞—Å—Ç—Ä–æ–π–∫–∞"
	buttonInformation   = "‚öìÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
)

var (
	config   configuration.Config
	database *sql.DB
	bot      *tgbotapi.BotAPI
)

func main() {
	configuration, err := helpers.GetConfig()
	if err != nil {
		log.Panic(err.Error())
	}
	config = configuration
	golosClient.Key_List[config.Account] = golosClient.Keys{
		PKey: config.PostingKey,
		AKey: config.ActiveKey}
	database, err = db.InitDB(config.DatabasePath)
	if err != nil {
		if err.Error() == "unable to open database file" {
			path, err := filepath.Abs(config.DatabasePath)
			if err != nil {
				log.Panic(err)
			}
			log.Panic(fmt.Sprintf("unable to open database at path: %s", path))
		}
		log.Panic(err)
	}
	defer database.Close()

	bot, err = tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = config.DebugMode
	log.Printf("Authorized on account %s", bot.Self.UserName)

	go freshnessPolice()
	go checkAuthority()
	go queueProcessor()
	//go supportedPostsReporter()
	//go curationMotivator()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Panic(err)
	}
	for update := range updates {
		err := processMessage(update)
		if err != nil {
			log.Println(err)
		}
	}
}

func processMessage(update tgbotapi.Update) error {
	chatID, err := helpers.GetChatID(update)
	if err != nil {
		return err
	}
	userID, err := helpers.GetUserID(update)
	if err != nil {
		return err
	}
	msg := tgbotapi.NewMessage(chatID, "")

	state, err := models.GetStateByUserID(userID, database)
	if err != nil {
		return err
	}

	if update.Message != nil {
		domainRegexp, err := helpers.GetDomainRegexp(config.Domains)
		if err != nil {
			return err
		}
		if update.Message.Chat.Type != "private" {
			return nil
		}
		switch {
		case update.Message.IsCommand():
			switch update.Message.Command() {
			case "start":
				username := "%username%"
				if len(update.Message.From.FirstName) > 0 {
					username = update.Message.From.FirstName
				}
				msg.Text = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! \n\n"+
					"–Ø ‚Äî –±–æ—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–∞ –≤ [—Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –±–ª–æ–∫—á–µ–π–Ω-—Å–µ—Ç–∏ \"–ì–æ–ª–æ—Å\"](https://golos.io).\n\n"+
					"–ú–æ–π –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å: %s\n\n"+
					"–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ \""+buttonAddKey+"\", "+
					"–ø–æ—Å–ª–µ —á–µ–≥–æ —è –¥–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.\n\n"+
					"–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ –º–æ–µ–º—É —Ö–æ–∑—è–∏–Ω—É ‚Äî %s",
					username, config.Repository, config.Developer)
				// save referral if exists
				if len(update.Message.CommandArguments()) > 0 {
					_, err := models.GetCredentialByUserID(userID, database)
					if err == sql.ErrNoRows {
						decodedString, err := base64.URLEncoding.DecodeString(update.Message.CommandArguments())
						if err == nil {
							referrer, err := models.GetCredentialByUserName(string(decodedString), database)
							if err == nil && referrer.Active == true {
								referral := models.Referral{UserID: userID,
									Referrer:  string(decodedString),
									UserName:  "",
									Completed: false}
								_, err = referral.Save(database)
								if err != nil {
									log.Println("–Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: " + err.Error())
								}
							}
						} else {
							log.Printf("–Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É %s", update.Message.CommandArguments())
						}
					}
				}
			}
			state.Action = update.Message.Command()
		case update.Message.Text == buttonAddKey:
			msg.Text = fmt.Sprintf("–î–æ–±–∞–≤—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç *%s* –≤ "+
				"[https://golostools.github.io/golos-vote-bot/](https://golostools.github.io/golos-vote-bot/) "+
				"(–∏–ª–∏ —á–µ—Ä–µ–∑ [—Ñ–æ—Ä–º—É –æ—Ç vik'a](https://golos.cf/multi/)), "+
				"–∞ –∑–∞—Ç–µ–º —Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –Ω–∞ –ì–æ–ª–æ—Å–µ", config.Account)
			state.Action = buttonAddKey
		case update.Message.Text == buttonRemoveKey:
			msg.Text = fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - %s", config.Developer)
			isActive := models.IsActiveCredential(userID, database)
			if isActive {
				credential, err := models.GetCredentialByUserID(userID, database)
				credential.Active = false
				credential.Curates = false
				result, err := credential.Save(database)
				if err != nil {
					log.Println(err.Error())
				}
				if true == result && err == nil {
					msg.Text = "–û—Ç–ª–∏—á–Ω–æ, —è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏ –∫—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤. " +
						"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∫–ª—é—á–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–¥–µ—Å—å: " +
						"https://golos.cf/multi/off.html"
				}
			} else {
				msg.Text = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
			}
			state.Action = buttonRemoveKey
		case update.Message.Text == buttonSetPowerLimit:
			if false == models.IsActiveCredential(userID, database) {
				msg.Text = "–°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–µ–≥–∏—Ä—É–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–æ–π " + buttonAddKey
				break
			}
			msg.Text = "–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º–æ–π —Å–∏–ª—ã –ì–æ–ª–æ—Å–∞ –æ—Ç 1 –¥–æ 100%"
			state.Action = buttonSetPowerLimit
		case update.Message.Text == buttonInformation:
			if false == models.IsActiveCredential(userID, database) {
				msg.Text = "–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è"
				break
			}
			credential, err := models.GetCredentialByUserID(userID, database)
			if err != nil {
				return err
			}
			encodedUserName := base64.URLEncoding.EncodeToString([]byte(credential.UserName))
			referralLink := "https://t.me/" + config.TelegramBotName + "?start=" + encodedUserName
			msg.Text = fmt.Sprintf("–ê–∫–∫–∞—É–Ω—Ç: *%s*, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞: *%d%%*\n"+
				"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [%s](%s)\n"+
				"(–¥–∞–µ—Ç –æ–±–æ–∏–º –ø–æ %.3f –°–∏–ª—ã –ì–æ–ª–æ—Å–∞, "+
				"—É –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º %d –ø–æ—Å—Ç–æ–≤ "+
				"–∏ –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ì–æ–ª–æ—Å–æ–≤–∞–ª–æ—á–∫–æ–π –¥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)",
				credential.UserName, credential.Power, referralLink, referralLink, config.ReferralFee, config.ReferralMinimumPostCount)
			var button tgbotapi.InlineKeyboardButton
			if models.IsActiveCurator(userID, database) {
				button = tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ", "curating_stop")
			} else {
				button = tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º", "curating_start")
			}
			keyboard := []tgbotapi.InlineKeyboardButton{button}
			markup := tgbotapi.NewInlineKeyboardMarkup(keyboard)
			msg.ReplyMarkup = markup
			state.Action = buttonInformation
		case domainRegexp.MatchString(update.Message.Text):
			msg.ReplyToMessageID = update.Message.MessageID

			matched := domainRegexp.FindStringSubmatch(update.Message.Text)
			author, permalink := matched[1], matched[2]

			golos := golosClient.NewApi(config.Rpc, config.Chain)
			defer golos.Rpc.Close()
			post, err := golos.Rpc.Database.GetContent(author, permalink)
			if err != nil {
				return err
			}
			// check post exists in blockchain
			if post.Author != author || post.Permlink != permalink {
				return nil
			}

			lastVote := models.GetLastVoteForUserID(userID, database)
			userInterval, _ := models.ComputeIntervalForUser(userID, 10, config.PostingInterval, database)
			if time.Since(lastVote.Date) < userInterval && !config.DebugMode {
				msg.Text = "–ü—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞. –ù–∞–±–µ—Ä–∏—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è!"
				break
			}

			if config.Censorship {
				tags := post.JsonMetadata.Tags
				includesBannedTag := false
				for _, bannedTag := range config.BannedTags {
					for _, postTag := range tags {
						if postTag == bannedTag {
							includesBannedTag = true
							msg.Text = "–ù–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å—Ç—ã —Å —Ç–µ–≥–æ–º " + postTag
						}
					}

				}
				if includesBannedTag {
					break
				}
			}

			isActive := models.IsActiveCredential(userID, database)
			if !isActive {
				msg.Text = "–ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –ñ—É–ª–∏–∫ –Ω–µ –≤–æ—Ä—É–π!"
				break
			}

			if post.Mode != "first_payout" {
				msg.Text = "–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ—Å—Ç —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞! –ï—Å—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–≤–µ–∂–µ–µ?"
				break
			}

			if post.MaxAcceptedPayout == "0.000 GBG" {
				msg.Text = "–ú–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–æ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏"
				break
			}

			if models.GetOpenedVotesCount(database) >= config.MaximumOpenedVotes {
				msg.Text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π. " +
					"–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å –ø–æ–ª—É—á–∏—Ç –≥–æ–ª–æ—Å–∞ –∏–ª–∏ –ø–æ–ª–∏—Ü–∏—è —Å–≤–µ–∂–µ—Å—Ç–∏ –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –ø—Ä–æ—Ç—É—Ö—à–∏—Ö –ø–æ—Å—Ç–æ–≤."
				break
			}

			if helpers.IsVoxPopuli(author) && config.IgnoreVP {
				msg.Text = "–°–æ–æ–±—â–µ—Å—Ç–≤–∞ vox-populi –º–æ–≥—É—Ç —Å–∞–º–∏ —Å–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å"
				break
			}

			if len(post.Body) < config.MinimumPostLength {
				msg.Text = "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –Ω–µ —Å–∫—É–ø–∏—Å—å –Ω–∞ –±—É–∫–≤—ã!"
				break
			}

			percent := 100

			voteModel := models.Vote{
				UserID:    userID,
				Author:    author,
				Permalink: permalink,
				Percent:   percent,
				Completed: false,
				Rejected:  false,
				Addled:    false,
				Date:      time.Now(),
			}

			if voteModel.Exists(database) {
				msg.Text = "–£–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∞ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç!"
				break
			}

			voteID, err := voteModel.Save(database)
			if err != nil {
				return err
			}

			log.Printf("–í–∫–∏–Ω—É–ª–∏ —Å—Ç–∞—Ç—å—é \"%s\" –∞–≤—Ç–æ—Ä–∞ \"%s\" –≤ —á–∞—Ç–µ %d", permalink, author, chatID)

			msg.Text = "–ü–æ—Å—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ."

			if checkUniqueness(post.Body, voteModel) {
				go newPost(voteID, author, permalink, chatID)
			}

			return nil
		case state.Action == buttonAddKey:
			login := strings.ToLower(update.Message.Text)
			login = strings.Trim(login, "@")
			credential := models.Credential{
				UserID:   userID,
				ChatID:   chatID,
				UserName: login,
				Power:    100,
				Active:   true,
				Curates:  false,
			}

			golos := golosClient.NewApi(config.Rpc, config.Chain)
			defer golos.Rpc.Close()
			accounts, err := golos.Rpc.Database.GetAccounts([]string{login})
			if err != nil {
				return err
			} else if len(accounts) == 1 {
				hasPostingAuth := false
				for _, auth := range accounts[0].Posting.AccountAuths {
					if auth.([]interface{})[0] == config.Account {
						hasPostingAuth = true
						break
					}
				}
				if hasPostingAuth {
					// send referral fee
					referral, err := models.GetReferralByUserID(userID, database)
					if err == nil && !referral.Completed {
						if err = referral.SetCompleted(database); err == nil {
							referral.UserName = credential.UserName
							referral.Save(database)
							_, err = models.GetCredentialByUserName(credential.UserName, database)
							if err == sql.ErrNoRows {
								go sendReferralFee(referral.Referrer, credential.UserName)
							}
						}
					}

					_, err = credential.Save(database)
					if err != nil {
						return err
					}
					msg.Text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ç—ã –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫! " +
						"–ß—Ç–æ–±—ã –≤–æ–æ–±—â–µ –≤—Å–µ –ø–ª—é—à–∫–∏ –∑–∞–∏–º–µ—Ç—å, –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –µ—â–µ –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–º. " +
						"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, —Ç–∞–º –±—ã–≤–∞–µ—Ç –≤–µ—Å–µ–ª–æ: " + config.GroupLink
					state.Action = "successAuth"
				} else {
					msg.Text = fmt.Sprintf("–î–æ—Å—Ç—É–ø —É —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –º–µ–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. "+
						"–î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ https://golos.cf/multi/ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *%s*", config.Account)
				}
			} else {
				msg.Text = fmt.Sprintf("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ "+
					"–∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: %s", config.Developer)
				log.Printf("–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω: %s", update.Message.Text)
			}
		case state.Action == buttonSetPowerLimit:
			re := regexp.MustCompile("[0-9]+")
			valueString := re.FindString(update.Message.Text)
			value, err := strconv.Atoi(valueString)
			if err != nil {
				msg.Text = "–ù–µ –ø–æ–Ω—è–ª–∞. –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º–æ–π —Å–∏–ª—ã –ì–æ–ª–æ—Å–∞ –æ—Ç 1 –¥–æ 100%"
				break
			}
			if value >= 1 && value <= 100 {
				if false == models.IsActiveCredential(userID, database) {
					msg.Text = "–°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–µ–≥–∏—Ä—É–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–æ–π " + buttonAddKey
					break
				}

				credential, err := models.GetCredentialByUserID(userID, database)
				if err != nil {
					return err
				}

				golos := golosClient.NewApi(config.Rpc, config.Chain)
				defer golos.Rpc.Close()

				accounts, err := golos.Rpc.Database.GetAccounts([]string{credential.UserName})
				if err != nil {
					return err
				}

				voteWeightThreshold := 1.0 * 1000.0 * 1000.0
				vestingSharesPreparedString := strings.Split(accounts[0].VestingShares, " ")[0]
				vestingShares, err := strconv.ParseFloat(vestingSharesPreparedString, 64)
				if err != nil {
					return err
				}
				if vestingShares > voteWeightThreshold {
					err = credential.UpdatePower(value, database)
					if err != nil {
						return err
					}
					msg.Text = fmt.Sprintf("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –º–Ω–µ –≤ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ —Å–∏–ª–∞ –ì–æ–ª–æ—Å–∞ "+
						"–¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *%s* —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–∞ *%d%%*", credential.UserName, value)
				} else {
					msg.Text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è –°–∏–ª–∞ –ì–æ–ª–æ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ"
				}
				state.Action = "updatedPower"
			}
		default:
			if update.Message.Chat.Type != "private" {
				return nil
			}
			msg.ReplyToMessageID = update.Message.MessageID
			msg.Text = "–ù–µ –ø–æ–Ω–∏–º–∞—é"
		}
		if msg.ReplyMarkup == nil && update.Message.Chat.Type == "private" {
			firstButton := tgbotapi.NewKeyboardButton(buttonAddKey)
			secondButton := tgbotapi.NewKeyboardButton(buttonRemoveKey)
			firstButtonRow := []tgbotapi.KeyboardButton{firstButton, secondButton}

			thirdButton := tgbotapi.NewKeyboardButton(buttonSetPowerLimit)
			fourthButton := tgbotapi.NewKeyboardButton(buttonInformation)
			secondButtonRow := []tgbotapi.KeyboardButton{thirdButton, fourthButton}

			keyboard := tgbotapi.NewReplyKeyboard(firstButtonRow, secondButtonRow)
			msg.ReplyMarkup = keyboard
		}
	} else if update.CallbackQuery != nil {
		arr := strings.Split(update.CallbackQuery.Data, "_")
		voteStringID, action := arr[0], arr[1]
		if voteStringID == "curating" {
			switch action {
			case "start":
				if models.IsActiveCurator(userID, database) {
					msg.Text = "–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º"
					bot.Send(msg)
					return nil
				}
				credential, err := models.GetCredentialByUserID(userID, database)
				if err == nil && credential.ChatID == 0 {
					credential.ChatID = chatID
					credential.Save(database)
				}
				msg := tgbotapi.NewEditMessageText(chatID, update.CallbackQuery.Message.MessageID, "")
				msg.Text = config.CurationRules
				approveButton := tgbotapi.NewInlineKeyboardButtonData("üê¨‚ÄçÔ∏è–Ø —Å–ø—Ä–∞–≤–ª—é—Å—å", "curating_approve")
				declineButton := tgbotapi.NewInlineKeyboardButtonData("üê°‚Äç–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ", "curating_decline")
				keyboard := []tgbotapi.InlineKeyboardButton{approveButton, declineButton}
				markup := tgbotapi.NewInlineKeyboardMarkup(keyboard)
				msg.ReplyMarkup = &markup
				bot.Send(msg)
			case "approve":
				err = models.ActivateCurator(userID, database)
				if err != nil {
					return err
				}
				msg := tgbotapi.NewEditMessageText(chatID, update.CallbackQuery.Message.MessageID, "")
				msg.Text = "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤. " +
					"–°–∫–æ—Ä–æ —è –Ω–∞—á–Ω—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å—Å—ã–ª–∫–∏, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ"
				bot.Send(msg)
			case "decline":
				msg := tgbotapi.NewEditMessageText(chatID, update.CallbackQuery.Message.MessageID, "")
				msg.Text = "–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä. –ö—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–∏—Ö –ø–æ—Å—Ç–æ–≤ ‚Äî —Å–ª–æ–∂–Ω—ã–π –∏ –Ω–µ–±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å. " +
					"–õ—É—á—à–µ –ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã –∏ —Å–∫–∏–¥—ã–≤–∞–π –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö, –∞ –∫—É—Ä–∞—Ç–æ—Ä—ã –ø—É—Å—Ç—å –¥–µ–ª–∞—é—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É!"
				bot.Send(msg)
			case "stop":
				msg := tgbotapi.NewEditMessageText(chatID, update.CallbackQuery.Message.MessageID, "")
				if models.IsActiveCurator(userID, database) {
					err = models.DeactivateCurator(userID, database)
					if err != nil {
						return nil
					}
					msg.Text = "–ë—Ä–µ–º—è –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–∞ –ø–æ–∫–∏–Ω—É–ª–æ —Ç–µ–±—è. –ö–æ–≥–¥–∞ –≤–¥–æ–≤–æ–ª—å –Ω–∞—Å–ª–∞–¥–∏—à—å—Å—è —Å–≤–æ–±–æ–¥–æ–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!"
				} else {
					msg.Text = "–¢–æ, —á—Ç–æ –º–µ—Ä—Ç–≤–æ ‚Äî —É–º–µ—Ä–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –¢–∞–∫ –∏ —Ç—ã ‚Äî –Ω–µ–ª—å–∑—è –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∫—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –±—É–¥—É—á–∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–º"
				}
				bot.Send(msg)
			default:
				return errors.New("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: " + action)
			}
		} else {
			voteID, err := strconv.ParseInt(voteStringID, 10, 64)
			if err != nil {
				return err
			}
			if !models.IsActiveCurator(userID, database) {
				config := tgbotapi.CallbackConfig{
					CallbackQueryID: update.CallbackQuery.ID,
					Text:            "–ß–µ–∫–Ω–∏ —Å–≤–æ–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏. –¢—ã –Ω–µ –∫—É—Ä–∞—Ç–æ—Ä!",
				}
				bot.AnswerCallbackQuery(config)
				return nil
			}

			voteModel := models.GetVote(database, voteID)
			if voteModel.Completed {
				return nil
			}

			isGood := action == "good"
			response := models.Response{
				UserID: userID,
				VoteID: voteID,
				Result: isGood,
				Date:   time.Now(),
			}
			text := "–ò –¥–∞ –Ω–∞—Å—Ç–∏–≥–Ω–µ—Ç –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–∞—Ä–∞ –≤—Å–µ—Ö —Ç–µ—Ö, –∫—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å —Å–≤–æ–µ–π –≤–ª–∞—Å—Ç—å—é –∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑! –ê–¥–º–∏–Ω—å"
			responseExists := response.Exists(database)
			if !responseExists {
				text = "–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç"
				messageID, err := helpers.GetMessageID(update)
				if err != nil {
					return err
				}
				msg := tgbotapi.NewEditMessageText(chatID, messageID, "")
				msg.Text = text
				_, err = bot.Send(msg)
				if err != nil {
					log.Println(err.Error())
				}
			}

			callbackConfig := tgbotapi.CallbackConfig{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            text,
			}
			bot.AnswerCallbackQuery(callbackConfig)

			if !responseExists {
				_, err := response.Save(database)
				if err != nil {
					return err
				}
			}
		}
		return nil
	}

	_, err = state.Save(database)
	if err != nil {
		return err
	}

	if msg.Text == "" {
		return errors.New("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
	}

	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = true
	_, err = bot.Send(msg)
	if err != nil {
		return err
	}
	return nil
}

func removeUser(bot *tgbotapi.BotAPI, chatID int64, userID int) error {
	memberConfig := tgbotapi.KickChatMemberConfig{
		ChatMemberConfig: tgbotapi.ChatMemberConfig{
			ChatID: chatID,
			UserID: userID,
		},
		UntilDate: 0,
	}
	_, err := bot.KickChatMember(memberConfig)
	return err
}

// https://text.ru/api-check/manual
func checkUniqueness(text string, voteModel models.Vote) bool {
	token := config.TextRuToken
	if len(config.TextRuToken) == 0 {
		return false
	}

	text = strip.StripTags(text)

	if len(text) < config.MinimumPostLength {
		return false
	}

	cut := func(text string, to int) string {
		runes := []rune(text)
		if len(runes) > to {
			return string(runes[:to])
		}
		return text
	}
	maxSymbolCount := 2000
	text = cut(text, maxSymbolCount)

	httpClient := http.Client{}
	form := url.Values{}
	form.Add("text", text)
	form.Add("userkey", token)
	domainList := strings.Join(config.Domains, ",")
	form.Add("exceptdomain", domainList)
	form.Add("visible", "vis_on")
	req, err := http.NewRequest("POST", "http://api.text.ru/post", strings.NewReader(form.Encode()))
	if err != nil {
		log.Println(err.Error())
		return false
	}
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	resp, err := httpClient.Do(req)
	if err != nil {
		log.Println(err.Error())
		return false
	}
	if resp.StatusCode != 200 {
		log.Println("—Å—Ç–∞—Ç—É—Å –Ω–µ 200")
		return false
	}
	type Uid struct {
		TextUid string `json:"text_uid"`
	}
	var uid Uid
	jsonParser := json.NewDecoder(resp.Body)
	jsonParser.Decode(&uid)
	if len(uid.TextUid) == 0 {
		log.Println("–ù–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ text_uid")
		return false
	}
	step := 0
	for step < 50 {
		step += 1
		time.Sleep(time.Second * 15)
		log.Printf("step %d", step)
		client := http.Client{}
		form := url.Values{}
		form.Add("uid", uid.TextUid)
		form.Add("userkey", token)
		//form.Add("jsonvisible", "detail")
		req, err := http.NewRequest("POST", "http://api.text.ru/post", strings.NewReader(form.Encode()))
		req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
		resp, err := client.Do(req)
		if err != nil {
			log.Println(err.Error())
			return false
		}
		type Result struct {
			TextUnique string `json:"text_unique"`
			ResultJson string `json:"result_json"`
		}
		var result Result
		jsonParser := json.NewDecoder(resp.Body)
		jsonParser.Decode(&result)
		if len(result.TextUnique) == 0 {
			continue
		}
		textUnique, err := strconv.ParseFloat(result.TextUnique, 32)
		if err != nil {
			log.Println(err.Error())
			return false
		}
		log.Println(textUnique)
		if textUnique < 20 {
			voteModel.Completed = true
			_, err := voteModel.Save(database)
			if err != nil {
				log.Println(err.Error())
				return false
			}
			return false
		} else {
			random := func(min, max int) int {
				rand.Seed(time.Now().Unix())
				return rand.Intn(max-min) + min
			}
			imageNumber := random(1, 18)
			report := fmt.Sprintf("[![–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ TEXT.RU](https://text.ru/image/get/%s/%d)](https://text.ru/antiplagiat/%s)",
				uid.TextUid, imageNumber, uid.TextUid)
			err = helpers.SendComment(voteModel.Author, voteModel.Permalink, report, config)
			if err != nil {
				log.Println(err.Error())
			}
			return true
		}
		// –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
		break
	}
	return false
}

func sendReferralFee(referrer string, referral string) {
	if referrer == referral {
		log.Printf("–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π %s —Å–æ–≤–ø–∞–¥–∞—é—Ç", referral)
		return
	}
	golos := golosClient.NewApi(config.Rpc, config.Chain)
	defer golos.Rpc.Close()
	accounts, err := golos.Rpc.Database.GetAccounts([]string{referral})
	if err != nil {
		log.Println("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç " + referral)
		return
	}
	if accounts[0].PostCount.Int64() < int64(config.ReferralMinimumPostCount) {
		log.Printf("–ó–∞ –Ω–æ–≤–∏—á–∫–∞ %s –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –±—É–¥–µ—Ç, —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –ø–æ—Å—Ç–æ–≤", referral)
		return
	}
	amount := fmt.Sprintf("%.3f GOLOS", config.ReferralFee)
	err = golos.TransferToVesting(config.Account, referrer, amount)
	err2 := golos.TransferToVesting(config.Account, referral, amount)
	if err != nil {
		log.Println(fmt.Sprintf("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–ª—É –≥–æ–ª–æ—Å–∞ %s \n–∞–∫–∫–∞—É–Ω—Ç—É %s", err.Error(), referrer))
	}
	if err2 != nil {
		log.Println(fmt.Sprintf("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–ª—É –≥–æ–ª–æ—Å–∞ %s \n–∞–∫–∫–∞—É–Ω—Ç—É %s", err.Error(), referral))
	}
	if err != nil || err2 != nil {
		return
	}
	markdownLink := func(account string) string {
		return fmt.Sprintf("[@%s](https://golos.io/@%s/transfers)", account, account)
	}
	referrerLink := markdownLink(referrer)
	referralLink := markdownLink(referral)
	text := fmt.Sprintf("–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π %s –∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π %s –ø–æ–ª—É—á–∞—é—Ç –ø–æ %.3f –°–∏–ª—ã –ì–æ–ª–æ—Å–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
		referrerLink, referralLink, config.ReferralFee)
	msg := tgbotapi.NewMessage(config.GroupID, text)
	msg.ParseMode = "Markdown"
	_, err = bot.Send(msg)
	if err != nil {
		log.Println("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + err.Error())
	}
}

func checkAuthority() {
	for {
		credentials, err := models.GetAllActiveCredentials(database)
		log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", len(credentials))
		if err != nil {
			log.Println(err.Error())
		}
		golos := golosClient.NewApi(config.Rpc, config.Chain)
		for _, credential := range credentials {
			if !golos.Verify_Delegate_Posting_Key_Sign(credential.UserName, config.Account) {
				log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–ª—é—á—ë–Ω", credential.UserName)
				credential.Active = false
				_, err = credential.Save(database)
				if err != nil {
					log.Println(err.Error())
				}
			}
		}
		golos.Rpc.Close()
		time.Sleep(1 * time.Hour)
	}
}

func newPost(voteID int64, author string, permalink string, chatID int64) {
	curatorChatIDs, err := models.GetAllActiveCurstorsChatID(database)
	if err != nil {
		log.Println(err.Error())
		return
	}
	curateText := "–ù–æ–≤—ã–π –ø–æ—Å—Ç - –Ω–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞. –ö—É—Ä–∏—Ä—É–π, –∫—É—Ä–∞—Ç–æ—Ä\n" + helpers.GetInstantViewLink(author, permalink)
	for _, curatorChatID := range curatorChatIDs {
		if curatorChatID == chatID {
			continue
		}
		msg := tgbotapi.NewMessage(curatorChatID, curateText)
		markup := helpers.GetVoteMarkup(voteID)
		msg.ReplyMarkup = markup
		msg.DisableWebPagePreview = false

		_, err := bot.Send(msg)
		if err != nil {
			log.Println(fmt.Sprintf("–ù–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É %n", curatorChatID))
		}
	}
}

func queueProcessor() {
	for {
		// TODO: –≤—ã–Ω–µ—Å—Ç–∏ –º–∏–Ω—É—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		time.Sleep(36 * time.Minute)
		log.Println("–ù–∞—á–∏–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ª—É—á—à–∏–π –ø–æ—Å—Ç")
		votes, err := models.GetAllOpenedVotes(database)
		if err != nil {
			log.Println(err.Error())
			continue
		}
		if len(votes) == 0 {
			log.Println("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
			continue
		}
		maxDiff := 0
		mostLikedPost := votes[0]
		for _, vote := range votes {
			var positives, negatives int
			positives, negatives = models.GetNumResponsesVoteID(vote.VoteID, database)
			diff := positives - negatives
			if diff > maxDiff {
				maxDiff = diff
				mostLikedPost = vote
			}
		}
		log.Printf("–õ—É—á—à–∏–π –ø–æ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: %s/%s", mostLikedPost.Author, mostLikedPost.Permalink)
		successVotesCount, err := helpers.Vote(mostLikedPost, database, config)
		text := fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∞ c %d –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å—Ç\n%s",
			successVotesCount,
			helpers.GetInstantViewLink(mostLikedPost.Author, mostLikedPost.Permalink))
		if err != nil {
			log.Println(err.Error())
			text = fmt.Sprintf("–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - %s\n%s",
				config.Developer,
				helpers.GetInstantViewLink(mostLikedPost.Author, mostLikedPost.Permalink))
		}
		msg := tgbotapi.NewMessage(config.GroupID, text)
		_, err = bot.Send(msg)
		if err != nil {
			log.Println(err.Error())
		}
	}
}

func freshnessPolice() {
	golos := golosClient.NewApi(config.Rpc, config.Chain)
	votes, err := models.GetAllOpenedVotes(database)
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", len(votes))
	if err != nil {
		log.Panic(err.Error())
	}
	for _, vote := range votes {
		post, err := golos.Rpc.Database.GetContent(vote.Author, vote.Permalink)
		if err != nil {
			log.Println(err.Error())
			continue
		}
		if post.Mode != "first_payout" {
			vote.Completed = true
			vote.Addled = true
			vote.Save(database)
			go excuseUs(vote)
		}
	}
	golos.Rpc.Close()
	time.Sleep(1 * time.Hour)
	freshnessPolice()
}

func excuseUs(vote models.Vote) {
	positives, negatives := models.GetNumResponsesVoteID(vote.VoteID, database)
	var msg tgbotapi.MessageConfig
	if positives >= negatives {
		text := fmt.Sprintf("–ü—Ä–æ—Å—Ç–∏, %s, —Ç–≤–æ–π –ø–æ—Å—Ç (%s/%s) —Ç–∞–∫ –∏ –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è —Å–≤–æ–∏—Ö –≥–æ–ª–æ—Å–æ–≤. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å "+
			"–ø–æ–ª—É—á—à–µ –∏ –∫—É—Ä–∞—Ç–æ—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–æ –æ—Ü–µ–Ω—è—Ç", vote.Author, vote.Author, vote.Permalink)
		msg = tgbotapi.NewMessage(config.GroupID, text)
	} else {
		vote.Rejected = true
		vote.Save(database)
		text := fmt.Sprintf("–üo—Å—Ç %d/%d –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏", vote.Author, vote.Permalink)
		msg = tgbotapi.NewMessage(config.GroupID, text)
	}
	_, err := bot.Send(msg)
	if err != nil {
		log.Println(err)
	}
}

func supportedPostsReporter() {
	time.Sleep(models.WannaSleepOneDay(12, 0)) // –°–ø–∞—Ç—å –¥–æ 12:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
	for {
		//supportedPosts, err:= models.GetTrulyCompletedVotesSince(models.GetLastReportDate(database), database)
		//if err != nil {
		//	log.Println(err)
		//} else {
		//–Ø –ø–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ—é, –∫–∞–∫ –ø–æ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç
		//err := golos.Post(config.Account, title, body, permlink, "", post_image string, config.ReportTags, v *PC_Vote, o *PC_Options)
		//if err != nil {
		//	log.Println(err)
		//} else {
		//	models.NewReportPosted(database)
		//}

		//}
		time.Sleep(24 * time.Hour)
	}
}

func curationMotivator() {
	time.Sleep(models.WannaSleepTill(0, 20, 0)) // –°–ø–∞—Ç—å –¥–æ 20:00 –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
	for {
		lastRewardDate := models.GetLastRewardDate(database)
		allResponses := models.GetNumResponsesForMotivation(lastRewardDate, database)
		var needResponsesToBeRewarded int

		golos := golosClient.NewApi(config.Rpc, config.Chain)
		defer golos.Rpc.Close()
		accounts, err := golos.Rpc.Database.GetAccounts([]string{config.Account})
		if err != nil {
			log.Println(err)
		} else {
			gold, _ := strconv.Atoi(strings.Replace(strings.Replace(accounts[0].SbdBalance, ".", "", 1), " GBG", "", 1))
			if gold < allResponses {
				needResponsesToBeRewarded = allResponses / gold
			} else {
				needResponsesToBeRewarded = 1
			}
			curatorIDs, err := models.GetUserIDsForMotivation(lastRewardDate, database)
			if err != nil {
				log.Println(err)
			} else {
				for _, userID := range curatorIDs {
					credential, err := models.GetCredentialByUserID(userID, database)
					if !credential.Active || err != nil {
						continue
					}
					curatorResponses := models.GetNumResponsesForMotivationForUserID(userID, lastRewardDate, database)
					goldForCurator := curatorResponses / needResponsesToBeRewarded
					amount := fmt.Sprintf("%d.%.3d GBG", goldForCurator/1000, goldForCurator%1000)
					err = golos.Transfer(config.Account, credential.UserName, "–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤", amount)
				}
			}
		}
		time.Sleep(7 * 24 * time.Hour)
	}
}
