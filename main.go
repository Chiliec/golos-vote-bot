package main

import (
	"database/sql"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"time"

	golosClient "github.com/asuleymanov/golos-go/client"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/grokify/html-strip-tags-go"

	"github.com/GolosTools/golos-vote-bot/config"
	"github.com/GolosTools/golos-vote-bot/db"
	"github.com/GolosTools/golos-vote-bot/helpers"
	"github.com/GolosTools/golos-vote-bot/models"
)

const (
	buttonAddKey        = "üê¨–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å"
	buttonRemoveKey     = "ü¶Ä–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
	buttonSetPowerLimit = "üí™–ù–∞—Å—Ç—Ä–æ–π–∫–∞"
	buttonInformation   = "‚öìÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
)

func main() {
	var configuration config.Config
	err := config.LoadConfiguration("./config.json", &configuration)
	if err != nil {
		log.Panic(err)
	}
	err = config.LoadConfiguration("./config.local.json", &configuration)
	if err != nil && !os.IsNotExist(err) {
		log.Panic(err)
	}
	if configuration.TelegramToken == "write-your-telegram-token-here" {
		log.Panic("–¢–æ–∫–µ–Ω –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–µ –≤–≤–µ–¥—ë–Ω")
	}

	golosClient.Key_List[configuration.Account] = golosClient.Keys{
		PKey: configuration.PostingKey,
		AKey: configuration.ActiveKey}

	database, err := db.InitDB(configuration.DatabasePath)
	if err != nil {
		if err.Error() == "unable to open database file" {
			path, err := filepath.Abs(configuration.DatabasePath)
			if err != nil {
				log.Panic(err)
			}
			log.Panic(fmt.Sprintf("unable to open database at path: %s", path))
		}
		log.Panic(err)
	}
	defer database.Close()

	bot, err := tgbotapi.NewBotAPI(configuration.TelegramToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Panic(err)
	}
	for update := range updates {
		err := processMessage(bot, update, configuration, database)
		if err != nil {
			log.Println(err)
		}
	}
}

func processMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, config config.Config, database *sql.DB) error {
	chatID, err := getChatID(update)
	if err != nil {
		return err
	}
	userID, err := getUserID(update)
	if err != nil {
		return err
	}
	msg := tgbotapi.NewMessage(chatID, "")

	state, err := models.GetStateByUserID(userID, database)
	if err != nil {
		return err
	}

	if update.Message != nil {
		domainRegexp, err := helpers.GetDomainRegexp(config.Domains)
		if err != nil {
			return err
		}
		if false == domainRegexp.MatchString(update.Message.Text) && update.Message.Chat.Type != "private" {
			return nil
		}
		switch {
		case update.Message.IsCommand():
			switch update.Message.Command() {
			case "start":
				username := "%username%"
				if len(update.Message.From.FirstName) > 0 {
					username = update.Message.From.FirstName
				}
				msg.Text = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! \n\n"+
					"–Ø ‚Äî –±–æ—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–∞ –≤ [—Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –±–ª–æ–∫—á–µ–π–Ω-—Å–µ—Ç–∏ \"–ì–æ–ª–æ—Å\"](https://golos.io).\n\n"+
					"–ú–æ–π –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å: https://github.com/GolosTools/golos-vote-bot\n\n"+
					"–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ \""+buttonAddKey+"\", "+
					"–ø–æ—Å–ª–µ —á–µ–≥–æ —è –¥–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.\n\n"+
					"–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ –º–æ–µ–º—É —Ö–æ–∑—è–∏–Ω—É ‚Äî %s",
					username, config.Developer)
				// save referral if exists
				if len(update.Message.CommandArguments()) > 0 {
					_, err := models.GetCredentialByUserID(userID, database)
					if err == sql.ErrNoRows {
						decodedString, err := base64.URLEncoding.DecodeString(update.Message.CommandArguments())
						if err == nil {
							// TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
							referrer := string(decodedString)
							referral := models.Referral{UserID: userID, Referrer: referrer, Completed: false}
							_, err = referral.Save(database)
							if err != nil {
								log.Println("–Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: " + err.Error())
							}
						} else {
							log.Printf("–Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É %s", update.Message.CommandArguments())
						}
					}
				}
			}
			state.Action = update.Message.Command()
		case update.Message.Text == buttonAddKey:
			msg.Text = fmt.Sprintf("–î–æ–±–∞–≤—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç *%s* –≤ https://golostools.github.io/golos-vote-bot/ "+
				"(–∏–ª–∏ —á–µ—Ä–µ–∑ [—Ñ–æ—Ä–º—É –æ—Ç vik'a](https://golos.cf/multi/)), "+
				"–∞ –∑–∞—Ç–µ–º —Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –Ω–∞ –ì–æ–ª–æ—Å–µ", config.Account)
			state.Action = buttonAddKey
		case update.Message.Text == buttonRemoveKey:
			msg.Text = fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - %s", config.Developer)
			isActive := models.IsActiveCredential(userID, database)
			if isActive {
				credential, err := models.GetCredentialByUserID(userID, database)
				credential.Active = false
				result, err := credential.Save(database)
				if true == result && err == nil {
					msg.Text = "–û—Ç–ª–∏—á–Ω–æ, —è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏ –∫—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤. " +
						"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∫–ª—é—á–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–¥–µ—Å—å: " +
						"https://golos.cf/multi/off.html"
				}
			} else {
				msg.Text = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
			}
			state.Action = buttonRemoveKey
		case update.Message.Text == buttonSetPowerLimit:
			if false == models.IsActiveCredential(userID, database) {
				msg.Text = "–°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–µ–≥–∏—Ä—É–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–æ–π " + buttonAddKey
				break
			}
			msg.Text = "–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º–æ–π —Å–∏–ª—ã –ì–æ–ª–æ—Å–∞ –æ—Ç 1 –¥–æ 100%"
			state.Action = buttonSetPowerLimit
		case update.Message.Text == buttonInformation:
			if false == models.IsActiveCredential(userID, database) {
				msg.Text = "–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è"
				break
			}
			credential, err := models.GetCredentialByUserID(userID, database)
			if err != nil {
				return err
			}
			encodedUserName := base64.URLEncoding.EncodeToString([]byte(credential.UserName))
			referralLink := "https://t.me/" + config.TelegramBotName + "?start=" + encodedUserName
			msg.Text = fmt.Sprintf("–ê–∫–∫–∞—É–Ω—Ç: *%s*\n"+
				"–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞: *%d%%*\n"+
				"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: *%d –ø—É–Ω–∫—Ç–æ–≤*\n"+
				"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: [%s](%s)\n(–≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –¥–∞–µ—Ç –æ–±–æ–∏–º –ø–æ %.3f –°–∏–ª—ã –ì–æ–ª–æ—Å–∞)",
				credential.UserName, credential.Power, credential.Rating, referralLink, referralLink, config.ReferralFee)
			state.Action = buttonInformation
		case domainRegexp.MatchString(update.Message.Text):
			msg.ReplyToMessageID = update.Message.MessageID

			matched := domainRegexp.FindStringSubmatch(update.Message.Text)
			author, permalink := matched[1], matched[2]

			golos := golosClient.NewApi(config.Rpc, config.Chain)
			defer golos.Rpc.Close()
			post, err := golos.Rpc.Database.GetContent(author, permalink)
			if err != nil {
				return err
			}
			// check post exists in blockchain
			if post.Author != author || post.Permlink != permalink {
				return nil
			}

			if update.Message.Chat.ID != config.GroupID {
				msg.Text = "–£–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n" + getInstantViewLink(author, permalink)
				msg.DisableWebPagePreview = false
				bot.Send(msg)
				return nil
			}

			if update.Message.Chat.Type == "private" {
				msg.Text = "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ " + config.GroupLink
				break
			}

			if models.GetTodayVotesCountForUserID(userID, database) >= config.MaximumUserVotesPerDay {
				msg.Text = "–õ–∏–º–∏—Ç —Ç–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–≤—ã—à–µ–Ω. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!"
				break
			}

			if models.GetLastVote(database).UserID == userID {
				msg.Text = "–ù–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–≤–∞ –ø–æ—Å—Ç–∞ –ø–æ–¥—Ä—è–¥. –ù–∞–±–µ—Ä–∏—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è!"
				break
			}

			if models.GetOpenedVotesCount(database) >= config.MaximumOpenedVotes {
				msg.Text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π. –ú–æ–∂–µ—Ç —Å–Ω–∞—á–∞–ª–∞ —Å –Ω–∏–º–∏ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è? –ò—â–∏ –ø–æ —Ç–µ–≥—É #–æ—Ç–∫—Ä—ã—Ç–æ"
				break
			}

			isActive := models.IsActiveCredential(userID, database)
			if false == isActive {
				msg.Text = "–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é –∏ –Ω–µ –º–æ–≥—É –¥–æ–ø—É—Å—Ç–∏—Ç—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤—É. " +
					"–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å"
				break
			}

			if post.Mode != "first_payout" {
				msg.Text = "–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ—Å—Ç —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!"
				break
			}

			if post.MaxAcceptedPayout == "0.000 GBG" {
				msg.Text = "–ú–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–æ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏"
				break
			}

			if helpers.IsVoxPopuli(author) {
				msg.Text = "–°–æ–æ–±—â–µ—Å—Ç–≤–∞ vox-populi –º–æ–≥—É—Ç —Å–∞–º–∏ —Å–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å"
				break
			}

			if len(post.Body) < config.MinimumPostLength {
				msg.Text = "–ß—Ç–æ-—Ç–æ —Å–æ–≤—Å–µ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —Ç—É—Ç —á–∏—Ç–∞—Ç—å..."
				break
			}

			percent := 100

			voteModel := models.Vote{
				UserID:    userID,
				Author:    author,
				Permalink: permalink,
				Percent:   percent,
				Date:      time.Now(),
			}

			if voteModel.Exists(database) {
				msg.Text = "–£–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∞ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç!"
				break
			}

			voteID, err := voteModel.Save(database)
			if err != nil {
				return err
			}

			log.Printf("–í–∫–∏–Ω—É–ª–∏ —Å—Ç–∞—Ç—å—é \"%s\" –∞–≤—Ç–æ—Ä–∞ \"%s\" –≤ —á–∞—Ç–µ %d", permalink, author, chatID)

			msg.Text = "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–æ—Å—Ç #–æ—Ç–∫—Ä—ã—Ç–æ\n" + getInstantViewLink(author, permalink)
			markup := getVoteMarkup(voteID, 0, 0)
			msg.ReplyMarkup = markup
			msg.DisableWebPagePreview = false
			message, err := bot.Send(msg)
			if err != nil {
				return err
			}
			go checkUniqueness(message, bot, post.Body, config, voteModel, database)
			return nil
		case state.Action == buttonAddKey:
			login := strings.ToLower(update.Message.Text)
			login = strings.Trim(login, "@")
			credential := models.Credential{
				UserID:   userID,
				UserName: login,
				Power:    100,
				Rating:   config.InitialUserRating,
				Active:   true,
			}
			if rating, err := credential.GetRating(database); err == nil {
				credential.Rating = rating
			}

			golos := golosClient.NewApi(config.Rpc, config.Chain)
			defer golos.Rpc.Close()
			accounts, err := golos.Rpc.Database.GetAccounts([]string{login})
			if err != nil {
				return err
			} else if len(accounts) == 1 {
				hasPostingAuth := false
				for _, auth := range accounts[0].Posting.AccountAuths {
					if auth.([]interface{})[0] == config.Account {
						hasPostingAuth = true
						break
					}
				}
				if hasPostingAuth {
					// send referral fee
					referral, err := models.GetReferralByUserID(userID, database)
					if err == nil && false == referral.Completed {
						if err = referral.SetCompleted(database); err == nil {
							_, err = models.GetCredentialByUserName(credential.UserName, database)
							if err == sql.ErrNoRows {
								go sendReferralFee(referral.Referrer, credential.UserName, config, bot, database)
							}
						}
					}

					_, err = credential.Save(database)
					if err != nil {
						return err
					}
					msg.Text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä! " +
						"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏: " + config.GroupLink
					state.Action = "successAuth"
				} else {
					msg.Text = fmt.Sprintf("–î–æ—Å—Ç—É–ø —É —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –º–µ–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. "+
						"–î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ https://golos.cf/multi/ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *%s*", config.Account)
				}
			} else {
				msg.Text = fmt.Sprintf("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ "+
					"–∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: %s", config.Developer)
				log.Printf("–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω: %s", update.Message.Text)
			}
		case state.Action == buttonSetPowerLimit:
			re := regexp.MustCompile("[0-9]+")
			valueString := re.FindString(update.Message.Text)
			value, err := strconv.Atoi(valueString)
			if err != nil {
				msg.Text = "–ù–µ –ø–æ–Ω—è–ª–∞. –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º–æ–π —Å–∏–ª—ã –ì–æ–ª–æ—Å–∞ –æ—Ç 1 –¥–æ 100%"
				break
			}
			if value >= 1 && value <= 100 {
				if false == models.IsActiveCredential(userID, database) {
					msg.Text = "–°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–µ–≥–∏—Ä—É–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–æ–π " + buttonAddKey
					break
				}
				credential, err := models.GetCredentialByUserID(userID, database)
				if err != nil {
					return err
				}
				err = credential.UpdatePower(value, database)
				if err != nil {
					return err
				}
				msg.Text = fmt.Sprintf("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –º–Ω–µ –≤ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ —Å–∏–ª–∞ –ì–æ–ª–æ—Å–∞ "+
					"–¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *%s* —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–∞ *%d%%*", credential.UserName, value)
				state.Action = "updatedPower"
			}
		default:
			if update.Message.Chat.Type != "private" {
				return nil
			}
			msg.Text = "–ù–µ –ø–æ–Ω–∏–º–∞—é"
		}
		if msg.ReplyMarkup == nil && update.Message.Chat.Type == "private" {
			firstButton := tgbotapi.NewKeyboardButton(buttonAddKey)
			secondButton := tgbotapi.NewKeyboardButton(buttonRemoveKey)
			firstButtonRow := []tgbotapi.KeyboardButton{firstButton, secondButton}
			thirdButton := tgbotapi.NewKeyboardButton(buttonSetPowerLimit)
			fourthButton := tgbotapi.NewKeyboardButton(buttonInformation)
			secondButtonRow := []tgbotapi.KeyboardButton{thirdButton, fourthButton}
			keyboard := tgbotapi.NewReplyKeyboard(firstButtonRow, secondButtonRow)
			msg.ReplyMarkup = keyboard
		}
	} else if update.CallbackQuery != nil {
		arr := strings.Split(update.CallbackQuery.Data, "_")
		voteStringID, action := arr[0], arr[1]
		voteID, err := strconv.ParseInt(voteStringID, 10, 64)
		if err != nil {
			return err
		}

		if false == models.IsActiveCredential(userID, database) {
			config := tgbotapi.CallbackConfig{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            "–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é, –Ω–µ –º–æ–≥—É –¥–æ–ø—É—Å—Ç–∏—Ç—å –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é",
			}
			bot.AnswerCallbackQuery(config)
			return nil
		}

		if models.GetLastResponse(database).UserID == userID {
			config := tgbotapi.CallbackConfig{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            "–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥",
			}
			bot.AnswerCallbackQuery(config)
			return nil
		}

		voteModel := models.GetVote(database, voteID)
		if voteModel.Completed {
			return nil
		}
		if voteModel.UserID == userID {
			config := tgbotapi.CallbackConfig{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            "–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ–π –∂–µ –ø–æ—Å—Ç!",
			}
			bot.AnswerCallbackQuery(config)
			return nil
		}

		isGood := action == "good"
		response := models.Response{
			UserID: userID,
			VoteID: voteID,
			Result: isGood,
			Date:   time.Now(),
		}
		text := "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!"
		responseExists := response.Exists(database)
		if !responseExists {
			text = "–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç"
		}

		credential := models.Credential{UserID: userID}
		rating, err := credential.GetRating(database)
		if err != nil {
			return err
		}
		if rating <= config.RequiredVotes {
			text = "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –ø–æ—Å—Ç—ã"
			config := tgbotapi.CallbackConfig{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            text,
			}
			bot.AnswerCallbackQuery(config)
			return nil
		}

		callbackConfig := tgbotapi.CallbackConfig{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            text,
		}
		bot.AnswerCallbackQuery(callbackConfig)

		if !responseExists {
			_, err := response.Save(database)
			if err != nil {
				return err
			}
			voteModel := models.GetVote(database, voteID)
			err = verifyVotes(bot, voteModel, update, config, database)
			if err != nil {
				return err
			}
			// —É–º–µ–Ω—å—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–µ–≥–æ –ø—Ä–∏ –æ—Ç—Ä—Ü–∏–∞—Ç–µ–ª—å–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
			if !response.Result {
				credential.DecrementRating(1, database)
			}
		}
		return nil
	}

	_, err = state.Save(database)
	if err != nil {
		return err
	}

	if msg.Text == "" {
		return errors.New("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
	}

	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = true
	_, err = bot.Send(msg)
	if err != nil {
		return err
	}
	return nil
}

func verifyVotes(bot *tgbotapi.BotAPI, voteModel models.Vote, update tgbotapi.Update, config config.Config, database *sql.DB) error {
	chatID, err := getChatID(update)
	if err != nil {
		return err
	}
	userID, err := getUserID(update)
	if err != nil {
		return err
	}
	messageID, err := getMessageID(update)
	if err != nil {
		return err
	}

	responses, err := models.GetAllResponsesForVoteID(voteModel.VoteID, database)
	if err != nil {
		return err
	}

	var positives, negatives int
	for _, response := range responses {
		if response.Result {
			positives = positives + 1
		} else {
			negatives = negatives + 1
		}
	}

	markup := getVoteMarkup(voteModel.VoteID, positives, negatives)
	updateTextConfig := tgbotapi.EditMessageTextConfig{
		BaseEdit: tgbotapi.BaseEdit{
			ChatID:      chatID,
			MessageID:   messageID,
			ReplyMarkup: &markup,
		},
		Text: update.CallbackQuery.Message.Text,
	}
	bot.Send(updateTextConfig)

	credential := models.Credential{UserID: userID}

	if positives+negatives >= config.RequiredVotes {
		if voteModel.Completed {
			return nil
		}
		voteModel.Completed = true
		_, err := voteModel.Save(database)
		if err != nil {
			return err
		}
		msg := tgbotapi.NewEditMessageText(chatID, messageID, "")
		if positives >= negatives {
			credential.IncrementRating(1, database)
			successVotes := vote(voteModel, config, database)
			msg.Text = fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∞ c %d –∞–∫–∫–∞—É–Ω—Ç–æ–≤", successVotes)
		} else {
			credential.DecrementRating(2*config.RequiredVotes, database)
			rating, err := credential.GetRating(database)
			if err != nil {
				return err
			}
			msg.Text = "–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–µ–≥–æ —Å–Ω–∏–∂–µ–Ω"
			if rating < 0 {
				err = removeUser(bot, chatID, userID)
				if err != nil {
					log.Println(err)
					msg.Text = "–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω"
				} else {
					msg.Text = "–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∏–π –∏—Å–∫–ª—é—á–µ–Ω"
				}
			}
			// –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä–∞—Ç–æ—Ä–∞–º
			for _, response := range responses {
				// –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ—Å—Ç
				if false == response.Result {
					credential, err := models.GetCredentialByUserID(response.UserID, database)
					if err != nil {
						return err
					}
					err = credential.IncrementRating(1, database)
					if err != nil {
						return err
					}
				}
			}
		}
		_, err = bot.Send(msg)
		if err != nil {
			return err
		}
	}
	return nil
}

func removeUser(bot *tgbotapi.BotAPI, chatID int64, userID int) error {
	memberConfig := tgbotapi.KickChatMemberConfig{
		ChatMemberConfig: tgbotapi.ChatMemberConfig{
			ChatID: chatID,
			UserID: userID,
		},
		UntilDate: 0,
	}
	_, err := bot.KickChatMember(memberConfig)
	return err
}

// https://text.ru/api-check/manual
func checkUniqueness(message tgbotapi.Message, bot *tgbotapi.BotAPI, text string, config config.Config, voteModel models.Vote, database *sql.DB) {
	token := config.TextRuToken
	if len(config.TextRuToken) == 0 {
		return
	}

	text = strip.StripTags(text)

	if len(text) < config.MinimumPostLength {
		return
	}

	cut := func(text string, to int) string {
		runes := []rune(text)
		if len(runes) > to {
			return string(runes[:to])
		}
		return text
	}
	maxSymbolCount := 2000
	text = cut(text, maxSymbolCount)

	httpClient := http.Client{}
	form := url.Values{}
	form.Add("text", text)
	form.Add("userkey", token)
	domainList := strings.Join(config.Domains, ",")
	form.Add("exceptdomain", domainList)
	form.Add("visible", "vis_on")
	req, err := http.NewRequest("POST", "http://api.text.ru/post", strings.NewReader(form.Encode()))
	if err != nil {
		log.Println(err.Error())
		return
	}
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	resp, err := httpClient.Do(req)
	if err != nil {
		log.Println(err.Error())
		return
	}
	if resp.StatusCode != 200 {
		log.Println("—Å—Ç–∞—Ç—É—Å –Ω–µ 200")
		return
	}
	type Uid struct {
		TextUid string `json:"text_uid"`
	}
	var uid Uid
	jsonParser := json.NewDecoder(resp.Body)
	jsonParser.Decode(&uid)
	if len(uid.TextUid) == 0 {
		log.Println("–ù–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ text_uid")
		return
	}
	step := 0
	for step < 50 {
		step += 1
		time.Sleep(time.Second * 15)
		log.Printf("step %d", step)
		client := http.Client{}
		form := url.Values{}
		form.Add("uid", uid.TextUid)
		form.Add("userkey", token)
		//form.Add("jsonvisible", "detail")
		req, err := http.NewRequest("POST", "http://api.text.ru/post", strings.NewReader(form.Encode()))
		req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
		resp, err := client.Do(req)
		if err != nil {
			log.Println(err.Error())
			return
		}
		type Result struct {
			TextUnique string `json:"text_unique"`
			ResultJson string `json:"result_json"`
		}
		var result Result
		jsonParser := json.NewDecoder(resp.Body)
		jsonParser.Decode(&result)
		if len(result.TextUnique) == 0 {
			continue
		}
		textUnique, err := strconv.ParseFloat(result.TextUnique, 32)
		if err != nil {
			log.Println(err.Error())
			return
		}
		log.Println(textUnique)
		if textUnique < 20 {
			voteModel.Completed = true
			_, err := voteModel.Save(database)
			if err != nil {
				log.Println(err.Error())
				return
			}
			// TODO: –ø–æ–Ω–∏–∑–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É –∫–∞—Ä–º—É
			editMessage := tgbotapi.EditMessageTextConfig{
				BaseEdit: tgbotapi.BaseEdit{
					ChatID:      config.GroupID,
					MessageID:   message.MessageID,
					ReplyMarkup: nil,
				},
				Text: fmt.Sprintf("–¢–µ–∫—Å—Ç –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–≥–æ %.0f%% "+
					"–ø–æ [text.ru](https://text.ru/antiplagiat/%s)", textUnique, uid.TextUid),
				ParseMode: "markdown",
			}
			_, err = bot.Send(editMessage)
			if err != nil {
				log.Println(err.Error())
			}
		} else {
			random := func(min, max int) int {
				rand.Seed(time.Now().Unix())
				return rand.Intn(max-min) + min
			}
			imageNumber := random(1, 18)
			report := fmt.Sprintf("[![–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ TEXT.RU](https://text.ru/image/get/%s/%d)](https://text.ru/antiplagiat/%s)",
				uid.TextUid, imageNumber, uid.TextUid)
			err = sendComment(config, voteModel.Author, voteModel.Permalink, report)
			if err != nil {
				log.Println(err.Error())
			}
		}
		// –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
		break
	}
}

func sendComment(config config.Config, author string, permalink string, text string) error {
	golos := golosClient.NewApi(config.Rpc, config.Chain)
	defer golos.Rpc.Close()
	vote := golosClient.PC_Vote{Weight: 100 * 100}
	options := golosClient.PC_Options{Percent: 50}
	err := golos.Comment(
		config.Account,
		author,
		permalink,
		text,
		&vote,
		&options)
	return err
}

func vote(vote models.Vote, config config.Config, database *sql.DB) int {
	credentials, err := models.GetAllCredentials(database)
	if err != nil {
		log.Println("–ù–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã")
		return 0
	}
	for _, credential := range credentials {
		if config.Account != credential.UserName {
			golosClient.Key_List[credential.UserName] = golosClient.Keys{PKey: config.PostingKey}
		}
	}
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∞–∫–∫–∞—É–Ω—Ç–æ–≤", len(credentials))

	var errors []error
	var wg sync.WaitGroup
	wg.Add(len(credentials))
	for _, credential := range credentials {
		go func(credential models.Credential) {
			defer wg.Done()
			weight := credential.Power * 100
			golos := golosClient.NewApi(config.Rpc, config.Chain)
			defer golos.Rpc.Close()
			err := golos.Vote(credential.UserName, vote.Author, vote.Permalink, weight)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: " + err.Error())
				errors = append(errors, err)
			}
		}(credential)
	}
	wg.Wait()
	return len(credentials) - len(errors)
}

func getVoteMarkup(voteID int64, positives int, negatives int) tgbotapi.InlineKeyboardMarkup {
	stringVoteID := strconv.FormatInt(voteID, 10)
	goodButton := tgbotapi.NewInlineKeyboardButtonData("üëç–õ–∞–π–∫ ("+strconv.Itoa(positives)+")", stringVoteID+"_good")
	badButton := tgbotapi.NewInlineKeyboardButtonData("üëé–î–∏–∑–ª–∞–π–∫ ("+strconv.Itoa(negatives)+")", stringVoteID+"_bad")
	row := []tgbotapi.InlineKeyboardButton{badButton, goodButton}
	markup := tgbotapi.InlineKeyboardMarkup{}
	markup.InlineKeyboard = append(markup.InlineKeyboard, row)
	return markup
}

func getChatID(update tgbotapi.Update) (int64, error) {
	if update.Message != nil {
		return update.Message.Chat.ID, nil
	} else if update.CallbackQuery != nil {
		return update.CallbackQuery.Message.Chat.ID, nil
	} else {
		return 0, errors.New("–Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID —á–∞—Ç–∞")
	}
}

func getUserID(update tgbotapi.Update) (int, error) {
	if update.Message != nil {
		return update.Message.From.ID, nil
	} else if update.CallbackQuery != nil {
		return update.CallbackQuery.From.ID, nil
	} else {
		return 0, errors.New("–Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}
}

func getMessageID(update tgbotapi.Update) (int, error) {
	if update.Message != nil {
		return update.Message.MessageID, nil
	} else if update.CallbackQuery != nil {
		return update.CallbackQuery.Message.MessageID, nil
	} else {
		return 0, errors.New("–Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è")
	}
}

func getInstantViewLink(author string, permalink string) string {
	return "https://t.me/iv?url=https://goldvoice.club/" + "@" + author + "/" + permalink + "&rhash=70f46c6616076d"
}

func sendReferralFee(referrer string, referral string, config config.Config, bot *tgbotapi.BotAPI, database *sql.DB) {
	golos := golosClient.NewApi(config.Rpc, config.Chain)
	defer golos.Rpc.Close()
	amount := fmt.Sprintf("%.3f GOLOS", config.ReferralFee)
	err := golos.TransferToVesting(config.Account, referrer, amount)
	err2 := golos.TransferToVesting(config.Account, referral, amount)
	if err != nil {
		log.Println(fmt.Sprintf("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–ª—É –≥–æ–ª–æ—Å–∞ %s \n–∞–∫–∫–∞—É–Ω—Ç—É %s", err.Error(), referrer))
	}
	if err2 != nil {
		log.Println(fmt.Sprintf("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∏–ª—É –≥–æ–ª–æ—Å–∞ %s \n–∞–∫–∫–∞—É–Ω—Ç—É %s", err.Error(), referral))
	}
	if err != nil || err2 != nil {
		return
	}
	markdownLink := func(account string) string {
		return fmt.Sprintf("[@%s](https://golos.io/@%s/transfers)", account, account)
	}
	referrerLink := markdownLink(referrer)
	referralLink := markdownLink(referral)
	text := fmt.Sprintf("–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π %s –∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π %s –ø–æ–ª—É—á–∞—é—Ç –ø–æ %.3f –°–∏–ª—ã –ì–æ–ª–æ—Å–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
		referrerLink, referralLink, config.ReferralFee)
	msg := tgbotapi.NewMessage(config.GroupID, text)
	msg.ParseMode = "Markdown"
	_, err = bot.Send(msg)
	if err != nil {
		log.Println("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + text)
	}
}
